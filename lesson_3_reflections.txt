Q: When would you want to use a remote repository rather than keeping all your work local?

It lets you access your work from any computer you may be working on. It lets others 
view, download, and commit to your repository without needing to have access to your
local computer, and it keeps backups in case your workstation crashes and you
lose a lot of information. Disaster recovery!

Q: Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

If Git pulled changes automatically, that would overwrite any changes you've made but haven't
had the chance to commit. It would constantly cause you to lose work and not be able to recover it.

Q: Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks clone a repository on GitHub. Clones are the same thing, except they clone a repository onto your local
workstation. Branches allow expanding upon a repository from a commit at a certain point in time. I would use
a fork if I want to build upon someone else's repository. I would clone a repository if I want to distribute it
to multiple workstations, good for a finished product. I would branch if I want to expand on a repository
and try adding a new feature. For any of these, the original repository (which was forked/cloned from) will
remain intact and impervious to changes.

Q: What is the benefit of having a copy of the last known state of the remote stored locally?

You can be aware of any new branches or commits that happened since you pulled the last known state. If
there is a common ancestor, you can then fast-forward merge to become up-to-date, or if not, you can tell
which commits and branches were introduced to either continue working from or to merge and keep consistent.

